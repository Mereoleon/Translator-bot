from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from deep_translator import GoogleTranslator
import random

BOT_TOKEN = ' __________________________ '  

# —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —è–∑—ã–∫–æ–≤ 
user_languages = {}

# –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
language_options = {
    "en": "üá¨üáß English",
    "de": "üá©üá™ German",
    "fr": "üá´üá∑ French",
    "es": "üá™üá∏ Spanish",
    "zh": "üá®üá≥ Chinese",
    "ar": "üá∏üá¶ Arabic",
    "ja": "üáØüáµ Japanese",
    "ru": "üá∑üá∫ Russian",
    "cat": "üê± Cat Language"  
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("–ù–∞—á–∞—Ç—å"), KeyboardButton("–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫")],
        [KeyboardButton("–ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=False
)

# /start 
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç ‚Äî —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/setlang ‚Äî –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫\n"
        "/help ‚Äî –ø–æ–º–æ—â—å",
        reply_markup=main_keyboard
    )

# /help 
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "<b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "–Ø –ø–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ –ù–∞—á–∞—Ç—å ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ ‚Äî –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞\n"
        "‚Ä¢ –ü–æ–º–æ—â—å ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç ‚Äî —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ!",
        parse_mode="HTML",
        reply_markup=main_keyboard
    )

# /setlang
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=code)]
        for code, name in language_options.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=reply_markup)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data
    user_id = query.from_user.id
    user_languages[user_id] = lang_code
    await query.edit_message_text(f"–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {language_options[lang_code]}")

# –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–æ—à–∞—á–∏–π
def translate_to_cat_language(text: str) -> str:
    sounds = ["–º—è—É", "–º—Ä—Ä", "–ø—É—Ä—Ä", "—à—à—à", "—Ñ—Ä—Ä", "–º—è—è—è—É"]
    words = text.split()
    cat_translation = [random.choice(sounds) for _ in words]
    return ' '.join(cat_translation)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
async def translate_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if text == "–ù–∞—á–∞—Ç—å":
        await start(update, context)
        return
    elif text == "–ü–æ–º–æ—â—å":
        await help_handler(update, context)
        return
    elif text == "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫":
        await set_language(update, context)
        return

    # –ø–æ–ª—É—á–∞–µ–º —è–∑—ã–∫
    target_lang = user_languages.get(user_id, "ru")

    try:
        if target_lang == "cat":
            translated = translate_to_cat_language(text)
        else:
            translated = GoogleTranslator(source='auto', target=target_lang).translate(text)

        lang_name = language_options.get(target_lang, target_lang)
        await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥ ({lang_name}):\n{translated}")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        print("–û—à–∏–±–∫–∞:", e)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(BOT_TOKEN).build()

# —Ö–µ–Ω–¥–ª–µ—Ä—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_handler))
app.add_handler(CommandHandler("setlang", set_language))
app.add_handler(CallbackQueryHandler(button_click))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, translate_message))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
app.run_polling()